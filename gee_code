
////////////// MOSAIC /////////////////


var mosaic1 = ee.ImageCollection([batav,droneaveiro]).mosaic();

//////////////////BRUUN EQUATION PARAMETERS//////////////////////

////LONG/CROSS//////////
var fcross = 4;
var flong = 1;
////////////////SEA-LEVEL RISE////////////////////////
var sealevel = 0.5;
/////////////ROSATI/////////////////
var Vd = 0.040;

//////////////PARAMETERS CUT AND APLICATION ////////////////

var bufferfirst = geometry.buffer(500);

var clipx = mosaic1.clip(bufferfirst);

var mosaic = mosaic1.reproject('EPSG:3857', null,9);


/////////////SLOPE ///////////
var slope = ee.Terrain.slope(mosaic);

/////////////VISUAL//////////////////

var slopestyle = {
  min: -20,
  max: 20,
  palette: ['2c2c2c', '00b8ff', '06dc40', 'ffd705', 'ff7700'],
}; 

var elevationVis = {
  min: -20,
  max: 20,
  palette: ['2c2c2c', '00b8ff', '06dc40', 'ffd705', 'ff7700'],
}; 

var topobatimetriavis = {
  min: -20,
  max: 20,
  palette: ['2c2c2c', '00b8ff', '06dc40', 'ffd705', 'ff7700'],
}; 

////////////////PROCESSING///////////////////////

var Berm_point = ee.Geometry.Point(geometry.coordinates().get(0));
var Close_point = ee.Geometry.Point(geometry.coordinates().get(1));

var Berm_point_Num = ee.Number(Berm_point);
var Close_point_Num = ee.Number(Close_point);

print(Close_point_Num);
print(Berm_point_Num);

// Extract the data
var Berm = mosaic
.reduceRegion(ee.Reducer.first(),Berm_point_Num,1);

var BermNum = ee.Number(Berm.get('b1'));

var Close = mosaic
.reduceRegion(ee.Reducer.first(),Close_point_Num,1);
var CloseNum = ee.Number(Close.get('b1')).multiply(-1);
// Add reducer output to the Features in the collection.
var angulo = slope.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: geometry,
  scale: 30,
  maxPixels: 1e9
});

var comprimentoW = geometry.length();
var Wnumber = ee.Number(comprimentoW);
var angleresult1 = angulo.get("slope");
var angleresult = ee.Number(angleresult1);

///////////////////////CALCULATIONS/////////////////////////////

var anglegrades = angleresult.divide(180).multiply(Math.PI).sin();

var angletan = ee.Number(anglegrades).tan();

//Simple Bruun (1962)
var simple = ee.Number(sealevel).divide(angletan);

//fcross-shore and flongshore are the contributions of other processes
//causing losses or gains of sediments in the active beach profile. (m/yr)
//1S = 1?/tan(ß) + fcross-shore + flongshore
//s (e.g., Cowell et al., 2003b; Stive, 2004;
//Yates et al., 2011; Aagaard and Sørensen, 2013; Anderson et al.,
//2015):

var addshore = ee.Number(sealevel).divide((angletan.add(ee.Number(fcross)).add(ee.Number(flong))));

// o Rosati et al. (2013) // Laboratory investigation of the Bruun Rule and beach response to sea level rise

var Rosati = (ee.Number(sealevel).multiply(Wnumber).add(ee.Number(Vd))).divide(BermNum.add(CloseNum));

var Rosati_result = ee.Number(Rosati);

var SimpleBrEq = ee.Number(sealevel).multiply((Wnumber.divide((CloseNum.add(BermNum)))));

///////////////////////BUFFERS/////////////////////////////

// Compute a buffer of the polygon.
var buffersimple = geometry.buffer(simple);
var buffershore = geometry.buffer(addshore);
var bufferRosati = geometry.buffer(Rosati_result);
var bufferNormal = geometry.buffer(SimpleBrEq);

///////////////////////PRINT/////////////////////////////
//////PARAMTERS RESULTS///////

print('Altura Berma',BermNum);
print('Profundidade de Fecho',CloseNum);
print ('angulo',anglegrades);
print('Comprimento W (m)', Wnumber);

/// RESULT EQUATION//////
print ('Media',anglegrades);
print('Bruun Simples', simple);
print('Bruun com sedimento Lonf/Cross', addshore);
print('Rosati Bruun' , Rosati_result);
print ('Bruun Simples Equação Normal',SimpleBrEq);

// BUFFERS RESULTS
Map.addLayer(mosaic, elevationVis, 'mosaic',0);
Map.addLayer(buffersimple, elevationVis, 'Simple Bruun',0);
Map.addLayer(buffershore, elevationVis, 'Cross/Longshore Bruun',0);
Map.addLayer(bufferRosati, elevationVis, 'Rosati Buffer',0);
Map.addLayer(bufferNormal, elevationVis, 'Normal Brunn',0);

//////////DECLIVE///////////////////

var slopeCNGBCO = batcngebco.reproject('EPSG:3857', null,300);
var slopeCNGBCO2 = ee.Terrain.slope(slopeCNGBCO);
Map.addLayer(slopeCNGBCO2, slopestyle, 'slopeCNGBCO',0);

var slopebatsmc = batsmc.reproject('EPSG:3857', null,300);
var slopebatsmc2 = ee.Terrain.slope(slopebatsmc);
Map.addLayer(slopebatsmc2, slopestyle, 'slopebatsmc',0); 


var slopealbatroz = ee.Terrain.slope(albatroz);
Map.addLayer(slopealbatroz, slopestyle, 'slopealbatroz',0);

//PRINCIPAL ANALISYS///////
Map.addLayer(slope, slopestyle, 'SLOPE ANÁLISE',0);

//////////////////BATHYMETRY//////////////////

Map.addLayer(batcngebco, elevationVis, 'batcngebco',0);
Map.addLayer(batsmc, elevationVis, 'batsmc',0);
Map.addLayer(mosaic, topobatimetriavis, 'MOSAICOS TOPOBATIMÉTRICO',0);

//////////W////////////

Map.addLayer(table, elevationVis, 'W',0);

var teste = ee.FeatureCollection(bufferNormal);

// Export the FeatureCollection to a KML file.
Export.table.toDrive({
  collection: teste,
  description:'buffer2',
  fileFormat: 'SHP'
});
var teste2 = ee.FeatureCollection(geometry);
// Export the FeatureCollection to a KML file.
Export.table.toDrive({
  collection: teste2,
  description:'vector2',
  fileFormat: 'SHP'
});

Map.addLayer(teste, elevationVis, 'TESTE',0);
 
